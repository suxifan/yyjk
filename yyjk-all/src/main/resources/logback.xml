<?xml version="1.0" encoding="UTF-8"?>
<configuration>

	<!-- %m输出的信息,%p日志级别,%t线程名,%d日期,%c类的全名,%i索引【从数字0开始递增】,,, -->
	<!-- appender是configuration的子节点，是负责写日志的组件。 -->
	<!-- ConsoleAppender：把日志输出到控制台 -->
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<!-- 
			<pattern>%d %p (%file:%line\)- %m%n</pattern>
			 -->
			<pattern>%d %p %c- %m%n</pattern>
			<!-- 控制台也要使用UTF-8，不要使用GBK，否则会中文乱码 -->
			<charset>UTF-8</charset>
		</encoder>
	</appender>
	
	<!-- RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
	<!-- 以下的大概意思是：1.先按日期存日志，日期变了，将前一天的日志文件名重命名为XXX%日期%索引，新的日志仍然是demo.log -->
	<!-- 2.如果日期没有发生变化，但是当前日志的文件大小超过1KB时，对当前日志进行分割 重命名 -->
	<!--打印INFO日志到log文件夹下-->
	<appender name="cictec" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<File>log/cictec.log</File>
        <!-- 过滤日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch><!-- 如果命中就使用这条日志 -->
            <onMismatch>DENY</onMismatch><!-- 如果没有命中就拒绝这条日志 -->
        </filter>
		<!-- rollingPolicy:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。 -->
		<!-- SizeAndTimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<!-- 活动文件的名字会根据fileNamePattern的值，每隔一段时间改变一次 -->
			<!-- 文件名：log/demo.2017-12-05.0.log -->
			<fileNamePattern>log/yyjk.%d.%i.log</fileNamePattern>
			<!-- 保存30天的日志, 单个日志文件最大50MB, 日志文件空间为20GB -->
			<maxHistory>30</maxHistory>
			<maxFileSize>20MB</maxFileSize>
			<totalSizeCap>20GB</totalSizeCap>
		</rollingPolicy>
		<encoder>
			<!-- pattern节点，用来设置日志的输入格式 -->
			<pattern>
				%d %p (%file:%line\)- %m%n
			</pattern>
			<!-- 记录日志的编码:此处设置字符集 - -->
			<charset>UTF-8</charset>
		</encoder>
	</appender>

	<!--打印ERROR日志到errLog文件夹下-->
	<appender name="cictecErr" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<File>errLog/cictecErr.log</File>
        <!-- 过滤日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch><!-- 如果命中就使用这条日志 -->
            <onMismatch>DENY</onMismatch><!-- 如果没有命中就拒绝这条日志 -->
        </filter>
		<!-- rollingPolicy:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。 -->
		<!-- SizeAndTimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<!-- 活动文件的名字会根据fileNamePattern的值，每隔一段时间改变一次 -->
			<!-- 文件名：log/demo.2017-12-05.0.log -->
			<fileNamePattern>errLog/yyjk.%d.%i.log</fileNamePattern>
			<!-- 保存30天的日志, 单个日志文件最大50MB, 日志文件空间为20GB -->
			<maxHistory>30</maxHistory>
			<maxFileSize>20MB</maxFileSize>
			<totalSizeCap>20GB</totalSizeCap>
		</rollingPolicy>
		<encoder>
			<!-- pattern节点，用来设置日志的输入格式 -->
			<pattern>
				%d %p (%file:%line\)- %m%n
			</pattern>
			<!-- 记录日志的编码:此处设置字符集 - -->
			<charset>UTF-8</charset>
		</encoder>
	</appender>	
	<!-- 控制台输出日志级别 -->
	<root level="info">
		<appender-ref ref="STDOUT" />
	</root>
	
	<!-- 指定项目中某个包，当有日志操作行为时的日志记录级别 -->
	<!-- com.liyan为根包，也就是只要是发生在这个根包下面的所有日志操作行为的权限都是DEBUG -->
	<!-- 级别依次为【从高到低】：FATAL > ERROR > WARN > INFO > DEBUG > TRACE -->
	<logger name="com.cictec" level="DEBUG">
		<appender-ref ref="cictec" />
		<appender-ref ref="cictecErr" />
	</logger>
</configuration> 